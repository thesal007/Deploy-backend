name: CI/CD Pipeline for Service

on:
  pull_request:
    branches: [main]  # Specify branches as needed
   # Adjust path to match the service directory
  push:
    branches: [main]  # Specify branches as needed
    # Adjust path to match the service directory
jobs:
  build:
    runs-on: ubuntu-latest  # Specifies that the job should run on the latest Ubuntu virtual environment provided by GitHub
    defaults:
      run:
        working-directory: "." # Adjust this to the root directory of your Node.js project

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # This step checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it
        with:
          fetch-depth: 0  # Ensures all branches and tags are fetched, useful for versioning or other git-related operations

      - name: Set up Node.js
        uses: actions/setup-node@v4  # This step sets up a Node.js environment with a specified version
        with:
          node-version: '20'  # Specify the Node.js version you require, e.g., '14', '16'

      - name: Install dependencies
        run: yarn install  # Runs yarn install to install all dependencies defined in your package.json

      - name: Run build
        run: yarn build  # Executes the build script defined in your package.json

      - name: Run tests
        env:
          CUSTOM_ENV_VARIABLE: ${{ secrets.MONGODB_URL }}  # Replace with actual environment variables needed for testing
        run: yarn test  # Executes tests using yarn. Customize this command based on your test runner

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4  # Archives build artifacts for use in later jobs or for deployment
        with:
          name: build
          path: |
            ./build
            ./package.json
            ./yarn.lock
 

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build

      - name: Prepare Deployment Directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            mkdir -p /home/ubuntu/apps/build
            mkdir -p /home/ubuntu/apps/build/configs

      - name: Copy files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./build/*"
          target: "/home/ubuntu/apps/build"

      - name: Create .env File
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "NODE_ENV=production" > /home/ubuntu/apps/build/configs/.env.production
            echo "PORT=${{secrets.PORT}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "MONGODB_URL=${{secrets.MONGODB_URL}}" >> /home/ubuntu/apps/build/configs/.env.production
      
       
      - name: Install Dependencies and Restart Application
        uses: appleboy/ssh-action@master  # Installs dependencies and restarts the application using a process manager
        with:
              host: ${{ secrets.SERVER_IP }}
              username: ${{ secrets.SERVER_USERNAME }}
              key: ${{ secrets.SSH_PRIVATE_KEY }}
              port: 22
              script: |
                cd /path/to/deployment/directory/build
                yarn install --production
                # Assume PM2 is used, Replace with other command for other process manager
                # Assume you have script for run start in production and restart in production
                # Check if the PM2 process is running
                if pm2 show product-service > /dev/null; then
                  echo "Application is running. Restarting..."
                  yarn restart
                else
                  echo "Application is not running. Starting..."
                  yarn start
                fi